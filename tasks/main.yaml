---
- name: include install tasks
  import_tasks: "install-{{ sanoid_install_source }}.yaml"

- name: create config directory
  file:
    dest: "{{ sanoid_conf_dir }}"
    state: directory
    owner: root
    group: root

- name: generate sanoid config
  ansible.builtin.template:
    src: ../templates/sanoid.conf.j2
    dest: "{{ sanoid_conf }}"
    owner: root
    group: root
    mode: '0700'

- name: enable sanoid prune service
  ansible.builtin.systemd:
    name: sanoid-prune.service
    enabled: yes

- name: enable sanoid timer
  ansible.builtin.systemd:
    name: sanoid.timer
    state: started
    enabled: yes

- name: set up SSH keys
  block:
    - name: generate SSH key
      ansible.builtin.user:
        name: root
        generate_ssh_key: yes
        ssh_key_bits: 2048
        ssh_key_file: ".ssh/{{ syncoid_generated_ssh_key }}"
      register: "user_info"
      when: syncoid_generate_ssh_key
      
    - name: add SSH key to destination authorized_keys
      ansible.posix.authorized_key:
        user: "{{ item.dest_user | default('root') }}"
        state: present
        key: "{{ user_info.ssh_public_key if syncoid_generate_ssh_key else lookup('file', syncoid_ssh_key) }}"
      delegate_to: "{{ item.dest_host }}"
      when: item.dest_host is defined
      with_items:
        - "{{ syncoid_syncs }}"
  when:
    - syncoid_syncs | length > 0

- name: set up syncoid systemd service
  block:
    - name: generate syncoid service unit file
      ansible.builtin.template:
        src: ../templates/syncoid.service.j2
        dest: "/usr/lib/systemd/system/{{ syncoid_service_name }}.service"
        owner: root
        group: root
        mode: '0700'
    - name: generate syncoid timer unit file
      ansible.builtin.template:
        src: ../templates/syncoid.timer.j2
        dest: "/usr/lib/systemd/system/{{ syncoid_service_name }}.timer"
        owner: root
        group: root
        mode: '0700'
    - name: enable syncoid timer
      ansible.builtin.systemd:
        name: "{{ syncoid_service_name }}.timer"
        state: started
        enabled: yes
        daemon_reload: yes
  when: syncoid_syncs | length > 0

- name: remove syncoid service
  block:
    - name: check service exists
      stat:
        path: "/usr/lib/systemd/system/{{ syncoid_service_name }}.timer"
      register: service_exists
    - name: disable syncoid timer
      ansible.builtin.systemd:
        name: "{{ syncoid_service_name }}.timer"
        state: stopped
        enabled: no
      when: service_exists.stat.exists
    - name: remove syncoid service unit file
      file:
        dest: "/usr/lib/systemd/system/{{ syncoid_service_name }}.service"
        state: absent
    - name: remove syncoid timer unit file
      file:
        dest: "/usr/lib/systemd/system/{{ syncoid_service_name }}.timer"
        state: absent
    - name: reload systemd
      ansible.builtin.systemd:
        daemon_reload: yes
  when: syncoid_syncs | length == 0
